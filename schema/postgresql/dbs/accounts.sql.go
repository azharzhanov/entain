// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: accounts.sql

package dbs

import (
	"context"
)

const getAccount = `-- name: GetAccount :one
SELECT id,
       balance
FROM accounts
WHERE id = $1
`

type GetAccountRow struct {
	ID      int64
	Balance string
}

func (q *Queries) GetAccount(ctx context.Context, id int64) (GetAccountRow, error) {
	row := q.queryRow(ctx, q.getAccountStmt, getAccount, id)
	var i GetAccountRow
	err := row.Scan(&i.ID, &i.Balance)
	return i, err
}

const getBalanceForUpdate = `-- name: GetBalanceForUpdate :one
SELECT balance::FLOAT
FROM accounts
WHERE id = $1
FOR UPDATE
`

func (q *Queries) GetBalanceForUpdate(ctx context.Context, id int64) (float64, error) {
	row := q.queryRow(ctx, q.getBalanceForUpdateStmt, getBalanceForUpdate, id)
	var balance float64
	err := row.Scan(&balance)
	return balance, err
}

const isAccountExists = `-- name: IsAccountExists :one
SELECT EXISTS(SELECT
              FROM accounts
              WHERE id = $1) AS exists
`

func (q *Queries) IsAccountExists(ctx context.Context, id int64) (bool, error) {
	row := q.queryRow(ctx, q.isAccountExistsStmt, isAccountExists, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const updateBalance = `-- name: UpdateBalance :exec
UPDATE accounts
SET balance = $1::FLOAT
WHERE id = $2
`

type UpdateBalanceParams struct {
	NewBalance float64
	ID         int64
}

func (q *Queries) UpdateBalance(ctx context.Context, arg UpdateBalanceParams) error {
	_, err := q.exec(ctx, q.updateBalanceStmt, updateBalance, arg.NewBalance, arg.ID)
	return err
}
