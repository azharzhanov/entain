// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0

package dbs

import (
	"database/sql/driver"
	"fmt"
	"time"
)

type SourceType string

const (
	SourceTypeGame    SourceType = "game"
	SourceTypeServer  SourceType = "server"
	SourceTypePayment SourceType = "payment"
)

func (e *SourceType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SourceType(s)
	case string:
		*e = SourceType(s)
	default:
		return fmt.Errorf("unsupported scan type for SourceType: %T", src)
	}
	return nil
}

type NullSourceType struct {
	SourceType SourceType
	Valid      bool // Valid is true if SourceType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSourceType) Scan(value interface{}) error {
	if value == nil {
		ns.SourceType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SourceType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSourceType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SourceType), nil
}

type TransactionState string

const (
	TransactionStateWin  TransactionState = "win"
	TransactionStateLose TransactionState = "lose"
)

func (e *TransactionState) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TransactionState(s)
	case string:
		*e = TransactionState(s)
	default:
		return fmt.Errorf("unsupported scan type for TransactionState: %T", src)
	}
	return nil
}

type NullTransactionState struct {
	TransactionState TransactionState
	Valid            bool // Valid is true if TransactionState is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTransactionState) Scan(value interface{}) error {
	if value == nil {
		ns.TransactionState, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TransactionState.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTransactionState) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TransactionState), nil
}

type Account struct {
	ID        int64
	Balance   string
	CreatedAt time.Time
}

type Transaction struct {
	ID            int64
	TransactionID string
	UserID        int64
	SourceType    SourceType
	State         TransactionState
	Amount        string
	CreatedAt     time.Time
}
