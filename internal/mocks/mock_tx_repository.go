// Code generated by MockGen. DO NOT EDIT.
// Source: entain/internal/domain (interfaces: TxRepository)
//
// Generated by this command:
//
//	mockgen -build_flags=--mod=mod -destination=internal/mocks/mock_tx_repository.go -package mocks entain/internal/domain TxRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	dbs "entain/schema/postgresql/dbs"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTxRepository is a mock of TxRepository interface.
type MockTxRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTxRepositoryMockRecorder
	isgomock struct{}
}

// MockTxRepositoryMockRecorder is the mock recorder for MockTxRepository.
type MockTxRepositoryMockRecorder struct {
	mock *MockTxRepository
}

// NewMockTxRepository creates a new mock instance.
func NewMockTxRepository(ctrl *gomock.Controller) *MockTxRepository {
	mock := &MockTxRepository{ctrl: ctrl}
	mock.recorder = &MockTxRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxRepository) EXPECT() *MockTxRepositoryMockRecorder {
	return m.recorder
}

// WithTransaction mocks base method.
func (m *MockTxRepository) WithTransaction(ctx context.Context, fn func(*dbs.Queries) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTransaction", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithTransaction indicates an expected call of WithTransaction.
func (mr *MockTxRepositoryMockRecorder) WithTransaction(ctx, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTransaction", reflect.TypeOf((*MockTxRepository)(nil).WithTransaction), ctx, fn)
}
