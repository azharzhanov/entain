// Code generated by MockGen. DO NOT EDIT.
// Source: entain/internal/domain (interfaces: AccountRepository)
//
// Generated by this command:
//
//	mockgen -build_flags=--mod=mod -destination=internal/mocks/mock_account_repository.go -package mocks entain/internal/domain AccountRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	domain "entain/internal/domain"
	dbs "entain/schema/postgresql/dbs"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAccountRepository is a mock of AccountRepository interface.
type MockAccountRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAccountRepositoryMockRecorder
	isgomock struct{}
}

// MockAccountRepositoryMockRecorder is the mock recorder for MockAccountRepository.
type MockAccountRepositoryMockRecorder struct {
	mock *MockAccountRepository
}

// NewMockAccountRepository creates a new mock instance.
func NewMockAccountRepository(ctrl *gomock.Controller) *MockAccountRepository {
	mock := &MockAccountRepository{ctrl: ctrl}
	mock.recorder = &MockAccountRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountRepository) EXPECT() *MockAccountRepositoryMockRecorder {
	return m.recorder
}

// GetAccount mocks base method.
func (m *MockAccountRepository) GetAccount(ctx context.Context, userID uint64) (*domain.AccountRead, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", ctx, userID)
	ret0, _ := ret[0].(*domain.AccountRead)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockAccountRepositoryMockRecorder) GetAccount(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockAccountRepository)(nil).GetAccount), ctx, userID)
}

// IsAccountExists mocks base method.
func (m *MockAccountRepository) IsAccountExists(ctx context.Context, userID uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAccountExists", ctx, userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAccountExists indicates an expected call of IsAccountExists.
func (mr *MockAccountRepositoryMockRecorder) IsAccountExists(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAccountExists", reflect.TypeOf((*MockAccountRepository)(nil).IsAccountExists), ctx, userID)
}

// TxGetBalance mocks base method.
func (m *MockAccountRepository) TxGetBalance(ctx context.Context, queries *dbs.Queries, userID uint64) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxGetBalance", ctx, queries, userID)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TxGetBalance indicates an expected call of TxGetBalance.
func (mr *MockAccountRepositoryMockRecorder) TxGetBalance(ctx, queries, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxGetBalance", reflect.TypeOf((*MockAccountRepository)(nil).TxGetBalance), ctx, queries, userID)
}

// TxUpdateBalance mocks base method.
func (m *MockAccountRepository) TxUpdateBalance(ctx context.Context, queries *dbs.Queries, userID uint64, balance float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxUpdateBalance", ctx, queries, userID, balance)
	ret0, _ := ret[0].(error)
	return ret0
}

// TxUpdateBalance indicates an expected call of TxUpdateBalance.
func (mr *MockAccountRepositoryMockRecorder) TxUpdateBalance(ctx, queries, userID, balance any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxUpdateBalance", reflect.TypeOf((*MockAccountRepository)(nil).TxUpdateBalance), ctx, queries, userID, balance)
}
