// Code generated by MockGen. DO NOT EDIT.
// Source: entain/internal/domain (interfaces: TransactionRepository)
//
// Generated by this command:
//
//	mockgen -build_flags=--mod=mod -destination=internal/mocks/mock_transaction_repository.go -package mocks entain/internal/domain TransactionRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	domain "entain/internal/domain"
	dbs "entain/schema/postgresql/dbs"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTransactionRepository is a mock of TransactionRepository interface.
type MockTransactionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionRepositoryMockRecorder
	isgomock struct{}
}

// MockTransactionRepositoryMockRecorder is the mock recorder for MockTransactionRepository.
type MockTransactionRepositoryMockRecorder struct {
	mock *MockTransactionRepository
}

// NewMockTransactionRepository creates a new mock instance.
func NewMockTransactionRepository(ctrl *gomock.Controller) *MockTransactionRepository {
	mock := &MockTransactionRepository{ctrl: ctrl}
	mock.recorder = &MockTransactionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionRepository) EXPECT() *MockTransactionRepositoryMockRecorder {
	return m.recorder
}

// IsTransactionExists mocks base method.
func (m *MockTransactionRepository) IsTransactionExists(ctx context.Context, transactionID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTransactionExists", ctx, transactionID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsTransactionExists indicates an expected call of IsTransactionExists.
func (mr *MockTransactionRepositoryMockRecorder) IsTransactionExists(ctx, transactionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTransactionExists", reflect.TypeOf((*MockTransactionRepository)(nil).IsTransactionExists), ctx, transactionID)
}

// TxCreateTransaction mocks base method.
func (m *MockTransactionRepository) TxCreateTransaction(ctx context.Context, queries *dbs.Queries, userID uint64, sourceType string, transaction *domain.TransactionWrite) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxCreateTransaction", ctx, queries, userID, sourceType, transaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// TxCreateTransaction indicates an expected call of TxCreateTransaction.
func (mr *MockTransactionRepositoryMockRecorder) TxCreateTransaction(ctx, queries, userID, sourceType, transaction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxCreateTransaction", reflect.TypeOf((*MockTransactionRepository)(nil).TxCreateTransaction), ctx, queries, userID, sourceType, transaction)
}
